(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./assets/js/modules/advanced-select.js":
/*!**********************************************!*\
  !*** ./assets/js/modules/advanced-select.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * This file is part of the KDN OZG package.
 *
 * @author    Gert Hammes <info@gerthammes.de>
 * @copyright 2020 Gert Hammes
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  "use strict";
  /**
   * Initialize custom select2 elements:
   * jQuery and Select2 are loaded globally by Sonata Admin and therefore are not required here!
   */

  return {
    setUpList: function setUpList(advancedSelectElements) {
      var self = this;

      for (var i = 0, n = advancedSelectElements.length; i < n; i++) {
        self.initSelect2(advancedSelectElements.item(i));
      }
    },
    initSelect2: function initSelect2(container) {
      var self = this; // @see vendor/sonata-project/admin-bundle/src/Resources/public/Admin.js

      var select = jQuery(container);
      var allowClearEnabled = false;
      var popover = select.data('popover');
      var maximumSelectionSize = null;
      var minimumResultsForSearch = 10;
      select.removeClass('form-control');

      if (select.find('option[value=""]').length || select.attr('data-sonata-select2-allow-clear') === 'true') {
        allowClearEnabled = true;
      } else if (select.attr('data-sonata-select2-allow-clear') === 'false') {
        allowClearEnabled = false;
      }

      if (select.attr('data-sonata-select2-maximumSelectionSize')) {
        maximumSelectionSize = select.attr('data-sonata-select2-maximumSelectionSize');
      }

      if (select.attr('data-sonata-select2-minimumResultsForSearch')) {
        minimumResultsForSearch = select.attr('data-sonata-select2-minimumResultsForSearch');
      }

      var selectOptions = {
        width: function width() {
          // Select2 v3 and v4 BC. If window.Select2 is defined, then the v3 is installed.
          // NEXT_MAJOR: Remove Select2 v3 support.
          return self.getSelect2Width(window.Select2 ? this.element : select);
        },
        dropdownAutoWidth: true,
        minimumResultsForSearch: minimumResultsForSearch,
        allowClear: allowClearEnabled,
        maximumSelectionSize: maximumSelectionSize
      };
      select.select2(selectOptions);

      if (undefined !== popover) {
        select.select2('container').popover(popover.options);
      }

      if (select.attr('data-reload-selector')) {
        select.on('change', function (e) {
          var $reloadSelect = $(select.attr('data-reload-selector')).first();
          self.updateSelectChoices($reloadSelect, e);
        });
      }
    },
    updateSelectChoices: function updateSelectChoices($element, event) {
      var self = this;
      var type, changedId;

      if (event.added) {
        type = 'added';
        changedId = event.added.id;
      } else {
        type = 'removed';
        changedId = event.removed.id;
      }

      var postData = {
        changeData: {
          entityId: $element.attr('data-entity-id'),
          groupValues: event.val,
          type: type,
          groupId: changedId
        }
      };
      var xhttp = new XMLHttpRequest();

      xhttp.onreadystatechange = function () {
        if (this.readyState === 4 && this.status === 200) {
          var result = JSON.parse(this.responseText);
          $element.select2('destroy');
          var oldSelected = $element.val();
          var origSelect = $element.get(0);

          for (var i = origSelect.options.length - 1; i >= 0; i--) {
            origSelect.options[i] = null;
          }

          for (var _i = 0, n = result.data.serviceList.length; _i < n; _i++) {
            var opt = document.createElement('option');
            var object = result.data.serviceList[_i];
            opt.value = object.id;
            opt.innerHTML = object.text;
            origSelect.appendChild(opt);
          }

          if (!oldSelected) {
            oldSelected = [];
          }

          var newSelected = [];

          if (result.data.removed && result.data.removed.length > 0) {
            for (var k = 0, kn = oldSelected.length; k < kn; k++) {
              var choiceId = parseInt(oldSelected[k]);
              var found = false;

              for (var r = 0, rn = result.data.removed.length; r < rn; r++) {
                if (choiceId === result.data.removed[r].id) {
                  found = true;
                  break;
                }
              }

              if (!found) {
                newSelected.push(choiceId);
              }
            }
          } else if (result.data.added && result.data.added.length > 0) {
            newSelected = oldSelected;

            for (var a = 0, an = result.data.added.length; a < an; a++) {
              var addedObject = result.data.added[a];

              if (oldSelected.indexOf(addedObject.id) < 0) {
                newSelected.push(addedObject.id);
              }
            }
          }

          $(origSelect).val(newSelected);
          $(origSelect).select2({
            width: function width() {
              // Select2 v3 and v4 BC. If window.Select2 is defined, then the v3 is installed.
              // NEXT_MAJOR: Remove Select2 v3 support.
              return self.getSelect2Width(window.Select2 ? this.element : select);
            },
            dropdownAutoWidth: true,
            minimumResultsForSearch: 10,
            allowClear: true,
            maximumSelectionSize: null
          });
        }
      };

      var url = $element.attr('data-url');

      if (!url) {
        url = $($element.data('select2').select).attr('data-url');
      }

      xhttp.open("POST", url, true);
      xhttp.setRequestHeader("Content-Type", "application/json");
      xhttp.send(JSON.stringify(postData));
    },

    /** Return the width for simple and sortable select2 element
     * @see vendor/sonata-project/admin-bundle/src/Resources/public/Admin.js  **/
    getSelect2Width: function getSelect2Width(element) {
      var ereg = /width:(auto|(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc)))/i; // this code is an adaptation of select2 code (initContainerWidth function)

      var style = element.attr('style'); //console.log("main style", style);

      if (style !== undefined) {
        var attrs = style.split(';');

        for (var i = 0, l = attrs.length; i < l; i = i + 1) {
          var matches = attrs[i].replace(/\s/g, '').match(ereg);
          if (matches !== null && matches.length >= 1) return matches[1];
        }
      }

      style = element.css('width');

      if (style.indexOf("%") > 0) {
        return style;
      }

      return '100%';
    },
    addLoader: function addLoader(container) {
      container.innerHTML = '<div class="chart-loader"><i class="fa fa-cog fa-spin fa-3x fa-fw"></i><span class="sr-only">Loading...</span></div>';
    }
  };
});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,