(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./assets/js/modules/chart.js":
/*!************************************!*\
  !*** ./assets/js/modules/chart.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * This file is part of the KDN OZG package.
 *
 * @author    Gert Hammes <info@gerthammes.de>
 * @copyright 2020 Gert Hammes
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Chart) {
      return factory(Chart);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function (Chart) {
  "use strict";

  return {
    setUpList: function setUpList(chartContainers) {
      var self = this;

      for (var i = 0; i < chartContainers.length; i++) {
        self.load(chartContainers.item(i));
      }
    },
    parseFunction: function parseFunction(str) {
      var fn_body_idx = str.indexOf('{'),
          fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
          fn_declare = str.substring(0, fn_body_idx),
          fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
          args = fn_params.split(',');
      args.push(fn_body);

      function Fn() {
        return Function.apply(this, args);
      }

      Fn.prototype = Function.prototype;
      return new Fn();
    },
    parseJson: function parseJson(rawData) {
      var self = this;

      if (_typeof(rawData) === 'object') {
        for (var key in rawData) {
          if (rawData.hasOwnProperty(key)) {
            rawData[key] = self.parseJson(rawData[key]);
          }
        }

        return rawData;
      } else if (typeof rawData === 'string' && rawData.startsWith('function(')) {
        return self.parseFunction(rawData);
      }

      return rawData;
    },
    initializeCanvas: function initializeCanvas(container, chartConfig) {
      var self = this;
      var canvas = document.createElement("canvas");
      canvas.setAttribute("class", "mb-statistics-chart");
      container.innerHTML = '';
      container.appendChild(canvas);
      var data = self.parseJson(chartConfig);
      var context = canvas.getContext('2d');
      var myChart = new Chart(context, data);
    },
    load: function load(container) {
      var self = this;

      if (self.chart) {
        self.chart.destroy();
      }

      self.addLoader(container);
      var xhttp = new XMLHttpRequest();

      xhttp.onreadystatechange = function () {
        container.innerHTML = '';

        if (this.readyState === 4 && this.status === 200) {
          var data = JSON.parse(this.responseText);

          if (data && data.chartConfig) {
            self.initializeCanvas(container, data.chartConfig);
          } else {
            container.innerHTML = '<div class="message-chart-empty">No data found</div>';
          }
        }
      };

      xhttp.open("GET", container.getAttribute('data-url'), true);
      xhttp.send();
    },
    addLoader: function addLoader(container) {
      container.innerHTML = '<div class="chart-loader"><i class="fa fa-cog fa-spin fa-3x fa-fw"></i><span class="sr-only">Loading...</span></div>';
    }
  };
});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,