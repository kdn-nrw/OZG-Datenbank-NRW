(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./assets/js/modules/chart.js":
/*!************************************!*\
  !*** ./assets/js/modules/chart.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * This file is part of the KDN OZG package.
 *
 * @author    Gert Hammes <info@gerthammes.de>
 * @copyright 2020 Gert Hammes
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Chart) {
      return factory(Chart);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function (Chart) {
  "use strict";

  return {
    setUpList: function setUpList(chartContainers) {
      var self = this;

      for (var i = 0; i < chartContainers.length; i++) {
        self.load(chartContainers.item(i));
      }
    },
    parseFunction: function parseFunction(str) {
      var fn_body_idx = str.indexOf('{'),
          fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
          fn_declare = str.substring(0, fn_body_idx),
          fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
          args = fn_params.split(',');
      args.push(fn_body);

      function Fn() {
        return Function.apply(this, args);
      }

      Fn.prototype = Function.prototype;
      return new Fn();
    },
    parseJson: function parseJson(rawData) {
      var self = this;

      if (_typeof(rawData) === 'object') {
        for (var key in rawData) {
          if (rawData.hasOwnProperty(key)) {
            rawData[key] = self.parseJson(rawData[key]);
          }
        }

        return rawData;
      } else if (typeof rawData === 'string' && rawData.startsWith('function(')) {
        return self.parseFunction(rawData);
      }

      return rawData;
    },
    initializeCanvas: function initializeCanvas(container, chartConfig) {
      var self = this;
      var canvas = document.createElement("canvas");
      canvas.setAttribute("class", "mb-statistics-chart");
      container.innerHTML = '';
      container.appendChild(canvas);
      var data = self.parseJson(chartConfig);
      var context = canvas.getContext('2d');
      var myChart = new Chart(context, data);
    },
    load: function load(container) {
      var self = this;

      if (self.chart) {
        self.chart.destroy();
      }

      self.addLoader(container);
      var xhttp = new XMLHttpRequest();

      xhttp.onreadystatechange = function () {
        container.innerHTML = '';

        if (this.readyState === 4 && this.status === 200) {
          var data = JSON.parse(this.responseText);

          if (data && data.chartConfig) {
            self.initializeCanvas(container, data.chartConfig);
          } else {
            container.innerHTML = '<div class="message-chart-empty">No data found</div>';
          }
        }
      };

      xhttp.open("GET", container.getAttribute('data-url'), true);
      xhttp.send();
    },
    addLoader: function addLoader(container) {
      container.innerHTML = '<div class="chart-loader"><i class="fa fa-cog fa-spin fa-3x fa-fw"></i><span class="sr-only">Loading...</span></div>';
    }
  };
});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbW9kdWxlcy9jaGFydC5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsIkNoYXJ0Iiwic2V0VXBMaXN0IiwiY2hhcnRDb250YWluZXJzIiwic2VsZiIsImkiLCJsZW5ndGgiLCJsb2FkIiwiaXRlbSIsInBhcnNlRnVuY3Rpb24iLCJzdHIiLCJmbl9ib2R5X2lkeCIsImluZGV4T2YiLCJmbl9ib2R5Iiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJmbl9kZWNsYXJlIiwiZm5fcGFyYW1zIiwiYXJncyIsInNwbGl0IiwicHVzaCIsIkZuIiwiRnVuY3Rpb24iLCJhcHBseSIsInByb3RvdHlwZSIsInBhcnNlSnNvbiIsInJhd0RhdGEiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInN0YXJ0c1dpdGgiLCJpbml0aWFsaXplQ2FudmFzIiwiY29udGFpbmVyIiwiY2hhcnRDb25maWciLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsImRhdGEiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIm15Q2hhcnQiLCJjaGFydCIsImRlc3Ryb3kiLCJhZGRMb2FkZXIiLCJ4aHR0cCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsIm9wZW4iLCJnZXRBdHRyaWJ1dGUiLCJzZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7QUFTQyxXQUFVQSxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QjtBQUN0QixNQUFJLElBQUosRUFBZ0Q7QUFDNUM7QUFDQUMscUNBQU8sQ0FBQyw0RUFBRCxDQUFELG1DQUFlLFVBQVVDLEtBQVYsRUFBaUI7QUFDbEMsYUFBT0YsT0FBTyxDQUFDRSxLQUFELENBQWQ7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UDtBQThFSCxDQWhHQSxDQUFELEMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEtETiBPWkcgcGFja2FnZS5cbiAqXG4gKiBAYXV0aG9yICAgIEdlcnQgSGFtbWVzIDxpbmZvQGdlcnRoYW1tZXMuZGU+XG4gKiBAY29weXJpZ2h0IDIwMjAgR2VydCBIYW1tZXNcbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoWydjaGFydC5qcyddLCBmdW5jdGlvbiAoQ2hhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KENoYXJ0KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2NoYXJ0LmpzJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU1VuZGVmaW5lZFByb3BlcnR5QXNzaWdubWVudFxuICAgICAgICByb290LmFwcENoYXJ0ID0gZmFjdG9yeShyb290LkNoYXJ0KTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uIChDaGFydCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldFVwTGlzdDogZnVuY3Rpb24gKGNoYXJ0Q29udGFpbmVycykge1xuICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydENvbnRhaW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWQoY2hhcnRDb250YWluZXJzLml0ZW0oaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlRnVuY3Rpb246IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgIGxldCBmbl9ib2R5X2lkeCA9IHN0ci5pbmRleE9mKCd7JyksXG4gICAgICAgICAgICAgICAgZm5fYm9keSA9IHN0ci5zdWJzdHJpbmcoZm5fYm9keV9pZHggKyAxLCBzdHIubGFzdEluZGV4T2YoJ30nKSksXG4gICAgICAgICAgICAgICAgZm5fZGVjbGFyZSA9IHN0ci5zdWJzdHJpbmcoMCwgZm5fYm9keV9pZHgpLFxuICAgICAgICAgICAgICAgIGZuX3BhcmFtcyA9IGZuX2RlY2xhcmUuc3Vic3RyaW5nKGZuX2RlY2xhcmUuaW5kZXhPZignKCcpICsgMSwgZm5fZGVjbGFyZS5sYXN0SW5kZXhPZignKScpKSxcbiAgICAgICAgICAgICAgICBhcmdzID0gZm5fcGFyYW1zLnNwbGl0KCcsJyk7XG5cbiAgICAgICAgICAgIGFyZ3MucHVzaChmbl9ib2R5KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gRm4oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGbi5wcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgRm4oKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZUpzb246IGZ1bmN0aW9uIChyYXdEYXRhKSB7XG4gICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChyYXdEYXRhKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gcmF3RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmF3RGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXdEYXRhW2tleV0gPSBzZWxmLnBhcnNlSnNvbihyYXdEYXRhW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByYXdEYXRhO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgKHJhd0RhdGEpID09PSAnc3RyaW5nJyAmJiByYXdEYXRhLnN0YXJ0c1dpdGgoJ2Z1bmN0aW9uKCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucGFyc2VGdW5jdGlvbihyYXdEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByYXdEYXRhO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRpYWxpemVDYW52YXM6IGZ1bmN0aW9uIChjb250YWluZXIsIGNoYXJ0Q29uZmlnKSB7XG4gICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcIm1iLXN0YXRpc3RpY3MtY2hhcnRcIik7XG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBzZWxmLnBhcnNlSnNvbihjaGFydENvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICBsZXQgbXlDaGFydCA9IG5ldyBDaGFydChjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGlmIChzZWxmLmNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jaGFydC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFkZExvYWRlcihjb250YWluZXIpO1xuICAgICAgICAgICAgbGV0IHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCAmJiB0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHRoaXMucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5jaGFydENvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsaXplQ2FudmFzKGNvbnRhaW5lciwgZGF0YS5jaGFydENvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJtZXNzYWdlLWNoYXJ0LWVtcHR5XCI+Tm8gZGF0YSBmb3VuZDwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB4aHR0cC5vcGVuKFwiR0VUXCIsIGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXJsJyksIHRydWUpO1xuICAgICAgICAgICAgeGh0dHAuc2VuZCgpO1xuICAgICAgICB9LFxuICAgICAgICBhZGRMb2FkZXI6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwiY2hhcnQtbG9hZGVyXCI+PGkgY2xhc3M9XCJmYSBmYS1jb2cgZmEtc3BpbiBmYS0zeCBmYS1md1wiPjwvaT48c3BhbiBjbGFzcz1cInNyLW9ubHlcIj5Mb2FkaW5nLi4uPC9zcGFuPjwvZGl2Pic7XG4gICAgICAgIH1cbiAgICB9O1xufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==